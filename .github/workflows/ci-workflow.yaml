name: CI Workflow
on: [push, pull_request]

jobs:
  build:
    name: build and test
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: chapter
        ports:
          - 5432:5432
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint
      - name: Run local tests
        run: npm t
      - name:
          Check code generation
          # 1) try to generate code, 2) clean up, 3) check if the correct code has been committed
        run: |
          npm run dev:server & ./server/wait-for localhost:5000 -- npm run gen
          killall node
          ./scripts/check-generated-code.sh
      - name:
          Check migrations
          # 1) apply commited migrations, 2) try to generate a new migration, 3) check if this was possible
        env:
          DB_PORT: 5432
        run: |
          npm run prisma -- migrate reset --force --skip-generate --skip-seed
          npm run prisma -- migrate dev --skip-generate --skip-seed --name test
          ./scripts/check-migrations.sh
      - name: Start Docker Development Environment
        env:
          DB_PORT: 54320
        run: docker compose up -d
      - name: Seed the Docker db
        env:
          DB_PORT: 54320
        # We don't need to build the server explicitly, because npm run
        # dev:server is run earlier and it runs tsc.
        run: npm run db:migrate:reset
