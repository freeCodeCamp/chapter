{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the API specification for Chapter",
    "version": "0.0.1",
    "title": "Chapter",
    "termsOfService": "https://www.freecodecamp.org/news/terms-of-service/",
    "contact": {
      "email": "chapter+dev@freecodecamp.org"
    },
    "license": {
      "name": "BSD 3-Clause",
      "url": "https://github.com/freeCodeCamp/chapter/blob/master/LICENSE"
    }
  },
  "tags": [
    {
      "name": "chapter",
      "description": "Everything about your Chapters"
    },
    {
      "name": "location",
      "description": "Everything about your Locations"
    },
    {
      "name": "user",
      "description": "Everything about your Users"
    }
  ],
  "paths": {
    "/locations": {
      "post": {
        "tags": ["location"],
        "summary": "Add a new location to the map",
        "description": "",
        "operationId": "addLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          },
          "description": "Location coordinates",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Location object"
          },
          "401": {
            "description": "Not authorized"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["location"],
        "summary": "Finds locations by country code, city, region, postal code or address",
        "description": "Multiple status values can be provided as query params",
        "operationId": "findLocations",
        "parameters": [
          {
            "name": "city",
            "in": "query",
            "description": "City value that needs to be considered for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "query",
            "description": "Region value that needs to be considered for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Address value that needs to be considered for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "description": "Country_code value that needs to be considered for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postal_code",
            "in": "query",
            "description": "Zip Code that need to be considered for filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}": {
      "get": {
        "tags": ["location"],
        "summary": "Find location by ID",
        "description": "Returns a single location",
        "operationId": "getLocationById",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "ID of location to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "404": {
            "description": "Location not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["location"],
        "summary": "Update an existing location",
        "description": "",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "ID of location to patch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          },
          "description": "Location object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Location not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["location"],
        "summary": "Deletes a location",
        "description": "",
        "operationId": "deleteLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Location id to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Location not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chapters": {
      "post": {
        "tags": ["chapter"],
        "summary": "Add a new chapter",
        "description": "",
        "operationId": "addChapter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Chapter"
              }
            }
          },
          "description": "Chapter details",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chapter response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chapter"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chapters/{chapterId}": {
      "get": {
        "tags": ["chapter"],
        "summary": "Retreive the details of a chapter",
        "description": "",
        "operationId": "findChapterById",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chapter"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Chapter not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chapters/{chapterId}/events": {
      "get": {
        "tags": ["chapter"],
        "summary": "Retreive the events belonging to a chapter",
        "description": "",
        "operationId": "findEventsInChapter",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Chapter not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chapters/{chapterId}/events/{eventId}": {
      "get": {
        "tags": ["chapter"],
        "summary": "Retreive an event by id",
        "description": "",
        "operationId": "findEventById",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "Invalid event"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Event/Chapter not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["chapter"],
        "summary": "Delete an event by id",
        "description": "",
        "operationId": "deleteEventById",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "Invalid event"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Event/Chapter not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chapters/{chapterId}/events/{eventId}/sponsors": {
      "get": {
        "tags": ["chapter"],
        "summary": "Retreive list of sponsors by event",
        "description": "",
        "operationId": "findSponsorsByEvent",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sponsor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["chapter"],
        "summary": "Add a new food, venue or other sponsor",
        "description": "",
        "operationId": "addSponsorToEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sponsor"
              }
            }
          },
          "description": "Sponsor details",
          "required": true
        },
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid sponsor object"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Event/Chapter not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chapters/{chapterId}/events/{eventId}/sponsors/{sponsorId}": {
      "get": {
        "tags": ["chapter"],
        "summary": "Retreive sponsor by ID",
        "description": "",
        "operationId": "findSponsorById",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "description": "ID of sponsor to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid sponsor object"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Event/Chapter/Sponsor not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["chapter"],
        "summary": "Delete a sponsor by id",
        "description": "",
        "operationId": "deleteSponsorById",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "description": "ID of sponsor to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid sponsor object"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Event/Chapter/Sponsor not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["chapter"],
        "summary": "Update a sponsor by id",
        "description": "",
        "operationId": "updateSponsorById",
        "parameters": [
          {
            "name": "chapterId",
            "in": "path",
            "description": "ID of chapter to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "description": "ID of sponsor to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid sponsor object"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Event/Chapter/Sponsor not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": ["user"],
        "summary": "Add a new user",
        "description": "",
        "operationId": "addUser",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User object"
          },
          "401": {
            "description": "Not authorized"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["user"],
        "summary": "Retreive the details of a user",
        "description": "",
        "operationId": "findUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["user"],
        "summary": "Edit an existing user",
        "description": "",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User object"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/ban": {
      "patch": {
        "tags": ["user"],
        "summary": "Ban a user",
        "description": "",
        "operationId": "banUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.chapter.io/v1"
    },
    {
      "url": "http://api.chapter.io/v1"
    }
  ],
  "components": {
    "requestBodies": {
      "User": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "User object",
        "required": true
      }
    },
    "schemas": {
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "country_code": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "Chapter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          },
          "creator_id": {
            "type": "string"
          }
        }
      },
      "Venue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          }
        }
      },
      "Sponsor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "logo_path": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SponsorType"
          }
        }
      },
      "SponsorType": {
        "type": "string",
        "enum": ["FOOD", "VENUE", "OTHER"]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "starts_at": {
            "type": "string"
          },
          "ends_at": {
            "type": "string"
          },
          "chapter_id": {
            "type": "string"
          },
          "venue_id": {
            "type": "string"
          },
          "canceled": {
            "type": "boolean"
          },
          "capacity": {
            "type": "integer"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
